name: Create Release and Merge to Master

on:
  push:
    branches:
      - develop

jobs:
  create-release-and-merge:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verificar palabra clave en commit
        id: check-keyword
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"CREAR_RELEASE"* ]]; then
            echo "keyword_found=true" >> $GITHUB_OUTPUT
            echo "✅ Palabra clave 'CREAR_RELEASE' encontrada en el commit"
          else
            echo "keyword_found=false" >> $GITHUB_OUTPUT
            echo "❌ Palabra clave 'CREAR_RELEASE' no encontrada en el commit"
            echo "Mensaje del commit: ${{ github.event.head_commit.message }}"
          fi
      
      - name: Configurar Git
        if: steps.check-keyword.outputs.keyword_found == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Crear rama release
        if: steps.check-keyword.outputs.keyword_found == 'true'
        run: |
          echo "🚀 Creando rama release..."
          git checkout develop
          git pull origin develop
          git checkout -b release
          git push -f -u origin release
          echo "✅ Rama release creada exitosamente"
      
      - name: Mezclar develop en release
        if: steps.check-keyword.outputs.keyword_found == 'true'
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source-branch: develop
          target-branch: release
      
      - name: Instalar dependencias Python
        if: steps.check-keyword.outputs.keyword_found == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Ejecutar pruebas unitarias en release
        if: steps.check-keyword.outputs.keyword_found == 'true'
        run: |
          echo "🧪 Ejecutando pruebas unitarias en rama release..."
          python -m unittest discover -s tests -v
          echo "✅ Todas las pruebas pasaron exitosamente en release"
      
      - name: Ejecutar análisis de cobertura en release
        if: steps.check-keyword.outputs.keyword_found == 'true'
        run: |
          echo "📊 Ejecutando análisis de cobertura en release..."
          python -m coverage run -m unittest discover -s tests -v
          python -m coverage html
          echo "✅ Análisis de cobertura completado en release"
      
      - name: Verificar que las pruebas pasaron
        if: steps.check-keyword.outputs.keyword_found == 'true'
        id: test-status
        run: |
          echo "✅ Todas las verificaciones completadas exitosamente"
          echo "tests_passed=true" >> $GITHUB_OUTPUT
      
      - name: Mezclar release a master
        if: steps.check-keyword.outputs.keyword_found == 'true' && steps.test-status.outputs.tests_passed == 'true'
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source-branch: release
          target-branch: master
      
      - name: Crear tag de release
        if: steps.check-keyword.outputs.keyword_found == 'true' && steps.test-status.outputs.tests_passed == 'true'
        run: |
          echo "🏷️ Creando tag de release..."
          # Obtener fecha actual para el tag
          RELEASE_DATE=$(date +"%Y%m%d_%H%M%S")
          TAG_NAME="release_${RELEASE_DATE}"
          
          git checkout master
          git pull origin master
          git tag -a "$TAG_NAME" -m "Release automático creado el $(date)"
          git push origin "$TAG_NAME"
          
          echo "✅ Tag $TAG_NAME creado exitosamente"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
      
      - name: Limpiar rama release
        if: steps.check-keyword.outputs.keyword_found == 'true' && steps.test-status.outputs.tests_passed == 'true'
        run: |
          echo "🧹 Limpiando rama release temporal..."
          git push origin --delete release
          echo "✅ Rama release eliminada"
      
      - name: Notificar éxito
        if: steps.check-keyword.outputs.keyword_found == 'true' && steps.test-status.outputs.tests_passed == 'true'
        run: |
          echo "🎉 ¡Release creado exitosamente!"
          echo "✅ Rama develop mezclada a master"
          echo "✅ Tag de release creado"
          echo "✅ Todas las pruebas pasaron correctamente"
          echo "✅ Rama release temporal eliminada"
      
      - name: Notificar que no se ejecutó
        if: steps.check-keyword.outputs.keyword_found == 'false'
        run: |
          echo "ℹ️ Workflow no ejecutado"
          echo "Para crear un release automático, incluye la palabra clave 'CREAR_RELEASE' en tu mensaje de commit en develop"
      
      - name: Notificar fallo en pruebas
        if: steps.check-keyword.outputs.keyword_found == 'true' && steps.test-status.outputs.tests_passed != 'true'
        run: |
          echo "❌ Las pruebas fallaron"
          echo "No se puede proceder con el merge a master"
          echo "Por favor, revisa y corrige los errores antes de intentar nuevamente"
